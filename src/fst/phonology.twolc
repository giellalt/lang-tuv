
!! !!!The Turkana morphophonological/twolc rules file 


Alphabet
! regular alphabet, latin + these ATR vowels?
 a b c d e f g h i j k l m n o p q r s t u v w x y z 
 ɔ ɛ ʊ ɪ ə
 A B C D E F G H I J K L M N O P Q R S T U V W X Y Z

! ATR harmony vowels
 %{oɔ%}:o %{eɛ%}:e %{uʊ%}:u %{iɪ%}:i
 %{oɔ%}:ɔ %{eɛ%}:ɛ %{uʊ%}:ʊ %{iɪ%}:ɪ
! others
 %{ao%}:o %{ao%}:a

! Triggers
 %[%+ATR%]:0 %[%-ATR%]:0 %[%+ATRdom%]:0 %[%-ATRdom%]:0
 %[%+ATR←NoLow%]:0 %[%-ATR←NoLow%]:0
 %[NATR%]:0 
! morpheme boundary
 %+:0 
 
 ;

Sets
 Vow      = a e i o u y ɔ ɛ ʊ ɪ ;
 Cns      = b c d f g h j k l m n p q r s t v w x z ;
 ATRplusSurf  = i u e o ə ;
 ATRminusSurf = ɪ ʊ ɛ ɔ a ;
 ATRplusDeep = %[%+ATR%] %[%+ATRdom%] ;
 ATRminusDeep = %[%-ATR%] %[%-ATRdom%] ;
 ATRsurf = i u e o ə ɪ ʊ ɛ ɔ a ;
 ATRdeep = %[%+ATR%] %[%-ATR%] %[%+ATRdom%] %[%-ATRdom%] %[%+ATR←NoLow%] %[%-ATR←NoLow%] ;
 ATRdom = %[%+ATRdom%] %[%-ATRdom%] %[%+ATR←NoLow%] %[%-ATR←NoLow%] ;
 blockersSurf = u a ;
 blockersDeep = %+ ;

Definitions
NoATRsurfs = \[:ATRsurf | :blockersSurf]* ;
NoATRs = \[ATRdeep: | :ATRsurf | :blockersSurf]* ;
ContextATRplus = [ATRplusDeep: | :ATRplusSurf ] ;
ContextATRminus = [ATRminusDeep: | :ATRminusSurf ] ;
blockers = :blockersSurf | blockersDeep: ;

!! !!!Rules

Rules

"Where ATR+ is possible"
!! __@RULENAME@__  
AX:AP => _ ?* ContextATRplus ;
         ContextATRplus ?* _ NoATRs ;
         where AX in ( %{oɔ%} %{eɛ%} %{uʊ%} %{iɪ%} )
                                          AP in (   o      e      u      i    )
                                            matched ;

"Where ATR- is possible"
!! __@RULENAME@__  
AX:AM => _ ?* ContextATRminus ;
         ContextATRminus ?* _ NoATRs ;
         where AX in ( %{oɔ%} %{eɛ%} %{uʊ%} %{iɪ%} )
                                          AM in (    ɔ      ɛ      ʊ      ɪ   )
                                            matched ;

"Disallow broken harmonies plus"
!! __@RULENAME@__  
AX:AP /<= _ \blockers* :ATRminusSurf ;
          :ATRminusSurf \blockers* _ ;
         where AX in ( %{oɔ%} %{eɛ%} %{uʊ%} %{iɪ%} )
                                          AP in (   o      e      u      i    )
                                            matched ;

"Disallow broken harmonies minus"
!! __@RULENAME@__  
AX:AM /<= _ \blockers* :ATRplusSurf ;
          :ATRplusSurf \blockers* _ ;
         where AX in ( %{oɔ%} %{eɛ%} %{uʊ%} %{iɪ%} )
                                          AM in (    ɔ      ɛ      ʊ      ɪ   )
                                            matched ;

"Require ATR+ No Low"
!! __@RULENAME@__  
AX:AH <= _  \ATRdom:* %[%+ATR←NoLow%]:   ;
         where AX in ( %{oɔ%} %{eɛ%} )
                                          AH in (   o      e    )
                                            matched ;

"Require ATR- No Low"
!! __@RULENAME@__  
AX:AM <= _  \ATRdom:* %[%-ATR←NoLow%]: ;
         where AX in ( %{oɔ%} %{eɛ%} )
                                          AM in (    ɔ      ɛ     )
                                            matched ;

"Where ATR+ is required"
!! __@RULENAME@__  
AX:AP <= _ \ATRdom:* %[%+ATRdom%]: ;
         %[%+ATR%]: \ATRminusDeep:* _ NoATRs %[NATR%]: ;
        _ NoATRs %[%+ATR%]: NoATRs .#. ;
         where AX in ( %{oɔ%} %{eɛ%} %{uʊ%} %{iɪ%} )
                                          AP in (   o      e      u      i    )
                                            matched ;

"Where ATR- is required"
!! __@RULENAME@__  
AX:AM <= _ \ATRdom:* %[%-ATRdom%]: ;
         %[%-ATR%]: \ATRplusDeep:* _ NoATRs %[NATR%]: ;
        _ NoATRs %[%-ATR%]: NoATRs .#. ;
         where AX in ( %{oɔ%} %{eɛ%} %{uʊ%} %{iɪ%} )
                                          AM in (    ɔ      ɛ      ʊ      ɪ   )
                                            matched ;


"Itive suffix after +ATR"
!! __@RULENAME@__  
%{ao%}:o <=> [:ATRplusSurf | %[%+ATR%]: ] \[ATRminusDeep: ]* _ ;
